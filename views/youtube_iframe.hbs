<!DOCTYPE html>
<html>

<body>
  <form action="/sendUrl/" method="get">
    <label for="url">Youtube URL (example: https://www.youtube.com/watch?v=IhQmXaEhksI) :</label><br>
    <input class="url" type="text" id="url" name="url" value="https://www.youtube.com/watch?v=IhQmXaEhksI"><br>
    <input type="submit" value="Submit">

    {{#if url}}
    <p>URL: {{url}}</p>
    {{/if}}

    {{#if swearingData}}
    {{#each swearingData}}
    <p id="data">Swearing Data: {{this}}</p><br />

    {{/each}}
    {{/if}}
    <p id="fetch">JS catch:</p>
  </form>

  <style>
    url,
    .url {
      width: 400px;
    }
  </style>

  <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
  <div id="player"></div>

  <script>



    //const fetch = document.getElementById("fetch").innerHTML = `${swearingData}`; 
    const some_data = document.getElementById("data").value;
    const fetch = document.getElementById("fetch").innerHTML = "blank data";

    fetch("/sendUrl", {
      method: "GET"
    }).then((response) => response.json()).then((resp_data) => {
      console.log("GOT FETCH DATA INSIDE JS::::")
      console.log(resp_data)
    }).catch(err) => console.log("ERROR FETCHING DATA:::", err)



    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    function onYouTubeIframeAPIReady() {
      player = new YT.Player('player', {
        sandbox: "allow-presentation allow-presentation allow-same-origin",
        height: '390',
        width: '640',
        videoId: `{{url}}`,
        playerVars: {
          'playsinline': 1
        },
        events: {
          'onReady': onPlayerReady,
          'onStateChange': onPlayerStateChange
        }
      });
    }

    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {
      event.target.playVideo();
    }

    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    var done = false;
    function onPlayerStateChange(event) {
      if (event.data == YT.PlayerState.PLAYING && !done) {
        var currentTimestamp = 0;
        var startSwearing = 67.32;
        var durationSwearing = 12.24;
        var endSwearing = startSwearing + durationSwearing;


        setInterval(function () {
          currentTimestamp = player.getCurrentTime()
          console.log("CURRENT TIMESTAMP::: " + currentTimestamp);
          console.log("START SWEARING::::", startSwearing, "ENDING SWEARING:::", endSwearing);
          if (currentTimestamp > startSwearing && currentTimestamp < endSwearing) { // HARD CODED
            console.log("SWEARING INCOMING")
          } else { console.log("NO SWEARING::::") }
        }, 1000);


        done = true;
      }
    }
    //   function getTimestamp(player) {
    //     var currentTimestamp = player.getCurrentTime();
    //     return currentTimestamp;
    //   }
  </script>
</body>

</html>