from youtube_transcript_api import YouTubeTranscriptApi
import json
import sys
import os
import re

transcriptDir = "./transcripts/"


video_id = str(sys.argv[1])

# Check if the video_id is valid for security reasons
validOrNotResult = re.search("^\w{11}$", video_id)

if not validOrNotResult:
    exit("Python Error: Invalid video ID, intentionally exiting for security reasons.")

print ("Python:::" + str(sys.argv[1]))

print ("DEBUG video_id:", video_id)

alreadyDownloadedTranscripts = os.path.isfile(transcriptDir + video_id + '.json');
if (alreadyDownloadedTranscripts):
    print("JSON file already exists for this video. Exiting.")
    exit()
        

# retrieve the available transcripts
try:
    print("Python Retrieving Transcript List:::")
    transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)
except:
    print("Error retrieving transcript list")
    

# iterate over all available transcripts


    # the Transcript object provides metadata properties
try:
    print("Python Iterating over Transcript List:::")
    for transcript in transcript_list:
        print(
    transcript.video_id,
    transcript.language,
    transcript.language_code,
    # whether it has been manually created or generated by YouTube
    transcript.is_generated,
    # whether this transcript can be translated or not
    transcript.is_translatable,
    # a list of languages the transcript can be translated to
    transcript.translation_languages,
    )
except:
    print("Error iterating over transcript list, transcript list is empty")


    # fetch the actual transcript data
    try:
        print("Python Fetching Transcript:::")
        print(transcript.fetch())
    except:
        print("Error fetching transcript")
       

    # translating the transcript will return another transcript object
    try:
        print("Python Translating Transcript:::")
        print(transcript.translate('en').fetch())
    except:
        print("Error translating transcript")
       

# you can also directly filter for the language you are looking for, using the transcript list
transcript = transcript_list.find_transcript(['en'])  

# or just filter for manually created transcripts  
# transcript = transcript_list.find_manually_created_transcript(['de', 'en'])  

# or automatically generated ones  
# transcript = transcript_list.find_generated_transcript(['de', 'en'])




# Write the transcript to a file as a json object
try:
    print("Python Writing Transcript to File:::")
    with open(transcriptDir + video_id + '.json', 'w') as outfile:
        json.dump(transcript.fetch(), (outfile))
except:
    print("Error writing transcript to file")
    
# This breaks the code when run from Node
# But it still works when run from the command line
# However it is the only way to get the output sent back to Node (incase of errors)
#sys.stdout.flush()





# if __name__ == "__main__":
#     main(sys.argv[1:])
